# -*- coding: utf-8 -*-
from django.db import models
from django.template.loader import get_template
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

from model_utils import Choices
from model_utils.models import TimeStampedModel


import re

#
# Newscache
#
class News(TimeStampedModel):
    """
    This model stores news generated by different events.

    An example:

    gen = Transition.objects.get(pk=1)
    rel = Deliberation.objects.get(pk=3)
    n = News(generating_object=gen, related_object=rel)
    n.save()

    """
    NEWS_TYPE = Choices(
        ('INST', 'institutional', _('institutional')),
        ('COMM', 'community', _('community'))
    )

    news_type = models.CharField(choices=NEWS_TYPE, default=NEWS_TYPE.institutional, max_length=4)

    priority = models.PositiveSmallIntegerField(verbose_name=_('priority'), default=3)

    # generating object generic relation
    generating_content_type   = models.ForeignKey(ContentType,
                                                  verbose_name=_('generating content type'),
                                                  related_name="generating_content_type_set_for_%(class)s")
    generating_object_pk      = models.PositiveIntegerField(_('object ID'))
    generating_object         = generic.GenericForeignKey(ct_field="generating_content_type",
                                                          fk_field="generating_object_pk")

    # related object generic relation
    related_content_type      = models.ForeignKey(ContentType,
                                                  verbose_name=_('related content type'),
                                                  related_name="related_content_type_set_for_%(class)s")
    related_object_pk         = models.PositiveIntegerField(_('object ID'))
    related_object            = generic.GenericForeignKey(ct_field="related_content_type",
                                                          fk_field="related_object_pk")

    text                      = models.TextField(verbose_name=_('text'), max_length=512)


    class Meta:
        verbose_name = _('cached news')
        verbose_name_plural = _('cached news')

    def __unicode__(self):
        if self.news_date:
            return u'%s %s' % \
                   (self.news_date.strftime("%d/%m/%Y"), self.text)
        else:
            return u'nessuna data - %s' % \
                   (self.text)

    @property
    def news_date(self):
        """
        Return the generating object's date, according to type of object
        The date is used in the news
        """
        from open_municipio.acts.models import Act, ActSupport, Transition

        generator = self.generating_object

        news_date = None
        if isinstance(generator, Act):
            news_date = generator.presentation_date
        elif isinstance(generator, ActSupport):
            news_date = generator.support_date
        elif isinstance(generator, Transition):
            news_date = generator.transition_date

        if not news_date:
            news_date = self.created.date()

        return news_date


    @classmethod
    def get_text_for_news(cls, context, template_file):
        """
        Generic class-method that dispatches text generation for the news
        to the proper template, given a context.

        Renders a template file, using a context, and returns it.
        
        Used by signal handlers to generate textual representation of the news.
        """
        template = get_template(template_file)
        return re.sub("\s+", " ", template.render(context).strip())




class NewsTargetMixin(models.Model):
    """
    A mix-in class for models which are valid targets for news generation. 
    """
    # A manager that can be used to retrieve the QuerySet of news items targeting this content object
    related_news_set = generic.GenericRelation(News,
                                           content_type_field='related_content_type',
                                           object_id_field='related_object_pk')
    @property
    def related_news(self):
        """
        Return the QuerySet of news items targeting this content object.
        """
        return self.related_news_set.all()


    class Meta:
        abstract = True

